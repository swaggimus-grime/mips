/// GTE division algorithm: returns a saturated 1.16 value. Divisions
/// by 0 shouldn't occur since we clip against the near plane but they
/// would saturate to 0x1ffff anyway.
///
/// The algorithm is based on Newtonâ€“Raphson, I copied mednafen's
/// implementation.
pub fn divide(numerator: u16, divisor: u16) -> u32 {
    let shift = divisor.leading_zeros();

    let n = (numerator as u64) << shift;
    let d = divisor << shift;

    let reciprocal = reciprocal(d) as u64;

    let res = (n * reciprocal + 0x8000) >> 16;

    if res <= 0x1ffff {
        res as u32
    } else {
        0x1ffff
    }
}

fn reciprocal(d: u16) -> u32 {
    let index = ((d & 0x7fff) + 0x40) >> 7;

    let factor = UNR_TABLE[index as usize] as i32 + 0x101;

    let d = (d | 0x8000) as i32;

    let tmp = ((d * -factor) + 0x80) >> 8;

    let r = ((factor * (0x20000 + tmp)) + 0x80) >> 8;

    r as u32
}

// Unsigned Newtown-Raphson look up table
const UNR_TABLE: [u8; 0x101] = [
    0xff, 0xfd, 0xfb, 0xf9, 0xf7, 0xf5, 0xf3, 0xf1, 0xef, 0xee, 0xec, 0xea, 0xe8, 0xe6, 0xe4, 0xe3,
    0xe1, 0xdf, 0xdd, 0xdc, 0xda, 0xd8, 0xd6, 0xd5, 0xd3, 0xd1, 0xd0, 0xce, 0xcd, 0xcb, 0xc9, 0xc8,
    0xc6, 0xc5, 0xc3, 0xc1, 0xc0, 0xbe, 0xbd, 0xbb, 0xba, 0xb8, 0xb7, 0xb5, 0xb4, 0xb2, 0xb1, 0xb0,
    0xae, 0xad, 0xab, 0xaa, 0xa9, 0xa7, 0xa6, 0xa4, 0xa3, 0xa2, 0xa0, 0x9f, 0x9e, 0x9c, 0x9b, 0x9a,
    0x99, 0x97, 0x96, 0x95, 0x94, 0x92, 0x91, 0x90, 0x8f, 0x8d, 0x8c, 0x8b, 0x8a, 0x89, 0x87, 0x86,
    0x85, 0x84, 0x83, 0x82, 0x81, 0x7f, 0x7e, 0x7d, 0x7c, 0x7b, 0x7a, 0x79, 0x78, 0x77, 0x75, 0x74,
    0x73, 0x72, 0x71, 0x70, 0x6f, 0x6e, 0x6d, 0x6c, 0x6b, 0x6a, 0x69, 0x68, 0x67, 0x66, 0x65, 0x64,
    0x63, 0x62, 0x61, 0x60, 0x5f, 0x5e, 0x5d, 0x5d, 0x5c, 0x5b, 0x5a, 0x59, 0x58, 0x57, 0x56, 0x55,
    0x54, 0x53, 0x53, 0x52, 0x51, 0x50, 0x4f, 0x4e, 0x4d, 0x4d, 0x4c, 0x4b, 0x4a, 0x49, 0x48, 0x48,
    0x47, 0x46, 0x45, 0x44, 0x43, 0x43, 0x42, 0x41, 0x40, 0x3f, 0x3f, 0x3e, 0x3d, 0x3c, 0x3c, 0x3b,
    0x3a, 0x39, 0x39, 0x38, 0x37, 0x36, 0x36, 0x35, 0x34, 0x33, 0x33, 0x32, 0x31, 0x31, 0x30, 0x2f,
    0x2e, 0x2e, 0x2d, 0x2c, 0x2c, 0x2b, 0x2a, 0x2a, 0x29, 0x28, 0x28, 0x27, 0x26, 0x26, 0x25, 0x24,
    0x24, 0x23, 0x22, 0x22, 0x21, 0x20, 0x20, 0x1f, 0x1e, 0x1e, 0x1d, 0x1d, 0x1c, 0x1b, 0x1b, 0x1a,
    0x19, 0x19, 0x18, 0x18, 0x17, 0x16, 0x16, 0x15, 0x15, 0x14, 0x14, 0x13, 0x12, 0x12, 0x11, 0x11,
    0x10, 0x0f, 0x0f, 0x0e, 0x0e, 0x0d, 0x0d, 0x0c, 0x0c, 0x0b, 0x0a, 0x0a, 0x09, 0x09, 0x08, 0x08,
    0x07, 0x07, 0x06, 0x06, 0x05, 0x05, 0x04, 0x04, 0x03, 0x03, 0x02, 0x02, 0x01, 0x01, 0x00, 0x00,
    0x00,
];

/// Unsigned Newtown-Raphson table generation, based on the No$ docs
#[test]
fn validate_unr_table() {
    for i in 0..0x100u32 {
        let v = (0x40000 / (i + 0x100) + 1) / 2 - 0x101;

        assert!(UNR_TABLE[i as usize] == v as u8);
    }

    assert!(UNR_TABLE[0xff] == UNR_TABLE[0x100]);
}

#[test]
fn test_divider() {
    // Tested against mednafen's "Divide" function's output. We only
    // reach the division if numerator < (divisor * 2).
    assert!(divide(0, 1) == 0);
    assert!(divide(0, 1234) == 0);
    assert!(divide(1, 1) == 0x10000);
    assert!(divide(2, 2) == 0x10000);
    assert!(divide(0xffff, 0xffff) == 0xffff);
    assert!(divide(0xffff, 0xfffe) == 0x10000);
    assert!(divide(1, 2) == 0x8000);
    assert!(divide(1, 3) == 0x5555);
    assert!(divide(5, 6) == 0xd555);
    assert!(divide(1, 4) == 0x4000);
    assert!(divide(10, 40) == 0x4000);
    assert!(divide(0xf00, 0xbeef) == 0x141d);
    assert!(divide(9876, 8765) == 0x12072);
    assert!(divide(200, 10000) == 0x51f);
    assert!(divide(0xffff, 0x8000) == 0x1fffe);
    assert!(divide(0xe5d7, 0x72ec) == 0x1ffff);
}
