//! Helper module to provide a trivial interface to sha256

use sha_backend::sha256::Sha256;
use sha_backend::utils::{Digest, DigestExt};
use std::convert::TryInto;
use std::default::Default;

/// Compute the SHA-256 of `bytes` and return it
pub fn sha256(bytes: &[u8]) -> [u8; 32] {
    let sha = Sha256::default().digest(bytes).to_bytes();

    sha.try_into().unwrap()
}

#[test]
fn test_sha256() {
    assert_eq!(
        sha256(b""),
        [
            0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f,
            0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b,
            0x78, 0x52, 0xb8, 0x55
        ]
    );
    assert_eq!(
        sha256(b"Rustation"),
        [
            0x4d, 0x12, 0x08, 0x9d, 0x76, 0x2e, 0x84, 0x89, 0x9a, 0xd2, 0x8e, 0x49, 0x7d, 0x7e,
            0xb2, 0x8d, 0xb2, 0x5a, 0x0c, 0xc1, 0x94, 0x57, 0x9e, 0x21, 0xe4, 0x6c, 0xbf, 0xa6,
            0x62, 0xd5, 0x71, 0xe8
        ]
    );
}
